<?php

namespace App\Nova;

use Illuminate\Http\Request;
use Illuminate\Validation\Rules;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\Email;
use Laravel\Nova\Fields\Gravatar;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Image;
use Laravel\Nova\Fields\Number;
use Laravel\Nova\Fields\Password;
use Laravel\Nova\Fields\Select;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Http\Requests\NovaRequest;
use Laravel\Nova\Panel;

class User extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var class-string<\App\Models\User>
     */
    public static $model = \App\Models\User::class;


    public static function label()
    {
        return "Пользователи системы"; // TODO: Change the autogenerated stub
    }

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'name';

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id', 'name', 'email',
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return array
     */
    public function fields(NovaRequest $request)
    {
        return [
            ID::make()->sortable(),

            Panel::make('Рег. данные', [
                Image::make('Аватар', 'avatar')->disk('public')->nullable(),
                Text::make('Имя', 'fullname')->required(),
                Email::make('E-mail', 'email')->required(),
                Password::make('Пароль', 'password')->required()->rules('min:8'),
                Text::make('Телефон', 'phone')->rules('min:8')->required(),
            ]),

            Panel::make('Пользовательские параметры', [
                Boolean::make('Главный пользователь', 'is_main'),
                Select::make('Роль пользователя', 'role')->options([
                    'user' => 'Обычный пользователь',
                    'administrator' => 'Администратор',
                    'owner' => 'Владелец',
                ])->default('user'),
                Select::make('Статус пользователя', 'status')->options([
                    'checked' => 'Проверка',
                    'active' => 'Активен',
                    'ban' => 'Забанен',
                ])->default('active'),
            ]),

            Panel::make('Доп. параметры', [
                BelongsTo::make('Группа пользователя', 'getUserGroup', UserGroupResource::class)->searchable(),

                Select::make('Тема', 'role')->options([
                    1 => 'По умолчанию',
                ])->default(1),
            ]),
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return array
     */
    public function cards(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return array
     */
    public function filters(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return array
     */
    public function lenses(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return array
     */
    public function actions(NovaRequest $request)
    {
        return [];
    }
}
